module sky;

import java.io.*;
import java.util.*;

/* Analyzer.salsa -- Parallel distance calculation rules
 *
 * Input: 
 *    1.  starsFile.txt, a stars text file with the first line giving the total number of stars in the file 
 *        followed by one line per star representing each star's three dimensions <x,y,z> as X Y Z. 
 *    2.  n, number of actors.
 *    3.  nameServer, the name server
 *    4.  theatersFile.txt, a file containing theater locations
 *
 * Output:  
 *    1.  Closest neighbours, the set of pairs of stars that minimize pairwise distance.
 *    2.  Farthest neighbours, the set of pairs of stars that maximize pairwise distance.
 *    3.  Ideal hub stars, the set of stars which minimize the maximal distance to any other star.
 *    4.  Ideal jail stars, the set of stars which maximize the minimal distance to any other star.
 *    5.  Ideal capital stars, the set of stars which minimize the average distance to all other stars.
 *
 * Algorithm:
 *    1.  
 *    2.  
 *    3a. 
 *    3b. 
 *
 * Note:  
 *
 */

behavior Analyze {
	String starsFile = "stars_21_xyz.txt";    // Stars file
	int n = 2;    // The number of actors   
	long initialTime;    // Starting Time
	String nameServer = "localhost";        // Name Server
	String theatersFile = "theatersFile.txt";    // File containing the theaters          

	void act(String args[]) {
		int argc = args.length;
		if(argc>=1) starsFile=args[0];
		if(argc>=2) n=Integer.parseInt(args[1]);
		if(argc>=3) nameServer=args[2];
		if(argc>=4) theatersFile = args[3];
		dedup()@distributeWork(token)@displayResults(token)@endTimer();
	}      

	/* Deduplicate the stars file, return the name of the deduplicated file */
	String dedup() {

	}

	/* Distribute to the actors based on dFile, the deduplicated stars file */
	double[][] distributeWork(String dFile) {

		//create actors and assign data
		Worker[] workers = new Worker[n];
		for (int i = 0; i < n; i++) {                                   
			workers[i] = new Worker();
		}

		// read available theaters
		Vector theaters = new Vector();
		String theater;
		try {
			BufferedReader in = new BufferedReader(new FileReader(theatersFile));
			while ((theater = in.readLine()) != null) {
				theaters.add(theater);
			}
			in.close(); 
		} catch (IOException ioe) {
			standardOutput<-println("[error] Can't open the file " + theatersFile + " for reading.");
		}

		// migrate actors to theaters
		for (int i = 0; i < n; i++) {
			standardOutput<-println("Sending actor "+
					"uan://"+nameServer+":3030/a"+i+" to "+
					"rmsp://"+theaters.get(i%theaters.size())+"/a"+i);

			workers[i] = new Worker() at  
				(new UAN("uan://"+nameServer+":3030/a"+i), 
				 new UAL("rmsp://"+theaters.get(i%theaters.size())+"/a"+i)
				);
		}

		//start computation
		standardOutput<-println(">>>>>>Starting the computation");
		initialTime = System.currentTimeMillis();
		join {
			try {
				BufferedReader in = new BufferedReader(new FileReader(dFile));
				while ((star = in.readLine()) != null) {
					String[] parts = star.split(" ");
					double x = Double.parseDouble(parts[0]);
					double y = Double.parseDouble(parts[1]);
					double z = Double.parseDouble(parts[2]);
					workers[i]<-calc(x,y,z,dFile);
				}
				in.close(); 
			} catch (IOException ioe) {
				standardOutput<-println("[error] Can't open the file " + theatersFile + " for reading.");
			}@summarize(token)@currentContinuation;
		}

		void endTimer(){
			long finalTime = System.currentTimeMillis();
			long runningTime = finalTime - initialTime;
			standardOutput<-println("Running time for star calculation is " + 
					runningTime+" ms.");
		}

		Result summarize(Object[] results) { // TODO
			//rceives the integral calculated from each actor's work
			double total = 0.0;
			for (int i = 0; i<results.length; i++){
				total += ((Double) results[i]).doubleValue();
			}
			return new Result(total); 
		}

		void displayResults(Result result) { // TODO
			standardOutput<-println("With "+n+" workers, our calculation of the stars in "+starsFile+" gets the following results:\n"+result);
		}
	}

