module sky;
import java.io.*;
import java.util.*;

/* Worker.salsa -- 
 *   Worker for parallel space colonization calculation
 */

behavior Worker implements ActorService {

	double[][] stardata;
	long initialTime;
	int id;
	String ana;

	void getData(double[][] data, int id, String ana) {
		stardata = new double[data.length][3];
		for (int i = 0; i < data.length; i++) for (int j = 0; j < 3; j++) stardata[i][j] = data[i][j];
		this.id = id;
		this.ana = ana;
	}

	double[][] sendData() {
		return stardata;
	}

	/** calculate the distances from this star (n-th line, counting from 0) to all the other stars, there are totally nstar lines */
	Result calc(String[] wnames) {
		initialTime = System.currentTimeMillis();
		join {
			for (int j = 0; j < wnames.length; j++) {
				for (int i = 0; i < stardata.length; i++) {
					calcPart(wnames[j], i);
				}
			}
		}@token t = combine(token);
		//@getReferenceByName(ana)<-loadBalance(id):waitfor(t); // comment this line when doing unit test or evaluating performance with different #worker and #theater
		iden(t)@currentContinuation;
	}

	Resultlet calcPart(String name, int i) {
			getReferenceByName(name)<-sendData()@getMinMax(stardata[i], token)@currentContinuation;
	}

	Result iden(Result t) {
		return t;
	}

	Result combine(Object[] results) {
		Resultlet[] rls = new Resultlet[results.length];
		for (int i = 0; i < results.length; i++) rls[i] = (Resultlet)results[i];
		return ResultAggregator.combine(rls, initialTime, stardata.length);
	}

	/** get the minimum distance and the maximum distance and the average distance from the n-th star to all the other stars */
	Resultlet getMinMax(double[] star, double[][] values) {
		return ResultAggregator.getMinMax(star, values);
	}



	/** for unit test */
	void act(String args[]) {
		double[][] stardata = new double[9][3];
		for (int i = 0; i < 9; i++) stardata[i][0] = 0.0;
		for (int i = 0; i < 9; i++) stardata[i][1] = i/3+0.0;
		for (int i = 0; i < 9; i++) stardata[i][2] = i%3+0.0;
		double[][] stardata1 = new double[3][3];
		for (int i = 0; i < 3; i++) for (int j = 0; j < 3; j++) stardata1[i][j] = stardata[i][j];
		double[][] stardata2 = new double[3][3];
		for (int i = 0, k = 3; i < 3; i++, k++) for (int j = 0; j < 3; j++) stardata2[i][j] = stardata[k][j];
		double[][] stardata3 = new double[3][3];
		for (int i = 0, k = 6; i < 3; i++, k++) for (int j = 0; j < 3; j++) stardata3[i][j] = stardata[k][j];

		Worker worker1 = new Worker() at (new UAN("uan://localhost:3030/a1"));
		Worker worker2 = new Worker() at (new UAN("uan://localhost:3030/a2"));
		Worker worker3 = new Worker() at (new UAN("uan://localhost:3030/a3"));
		Worker[] workers = new Worker[]{worker1, worker2, worker3};
		String[] wnames = new String[]{"uan://localhost:3030/a1", "uan://localhost:3030/a2", "uan://localhost:3030/a3"};
		join {
		worker1<-getData(stardata1, 1, null);
		worker2<-getData(stardata2, 2, null);
		worker3<-getData(stardata3, 3, null);
		}@join {
			for (int i = 0; i < workers.length; i++) workers[i]<-calc(wnames);
		}@displayResults(token);
		// @worker2<-calc(workers)@displayResult(token)
		// @worker3<-calc(workers)@displayResult(token);
		/*
		}@join {
			getMinMax(stardata[0], stardata1);
			getMinMax(stardata[0], stardata2);
			getMinMax(stardata[0], stardata3);
		}@combine1(token)@showResultlet(token)@standardOutput<-println(token)
		*/
	/*
	@getResultlet(stardata[0], workers)@showResultlet(token)@standardOutput<-println(token)
		@getResultlet(stardata[1], workers)@showResultlet(token)@standardOutput<-println(token)
		@getResultlet(stardata[2], workers)@showResultlet(token)@standardOutput<-println(token)
		*/
	/*
	@join {
			getResultlet(stardata[0], workers);
			getResultlet(stardata[1], workers);
			getResultlet(stardata[2], workers);			
		}@combine(token)@displayResult(token);
		*/

		/*
		join {
		worker1<-getData(stardata1);
		worker2<-getData(stardata2);
		worker3<-getData(stardata3);
		}@getResultlet(stardata[0], new Worker[]{worker1, worker2, worker3})@showResultlet(token)@standardOutput<-println(token);
		*/

		/*
		getResultlet(stardata[0], stardata1)@showResultlet(token)@standardOutput<-println(token)@
		getResultlet(stardata[0], stardata2)@showResultlet(token)@standardOutput<-println(token)@
		getResultlet(stardata[0], stardata3)@showResultlet(token)@standardOutput<-println(token);
		*/

		/*
		join {
			getResultlet(stardata[0], stardata1);
			getResultlet(stardata[0], stardata2);
			getResultlet(stardata[0], stardata3);
		}@combine1(token)@showResultlet(token)@standardOutput<-println(token);
		*/

		//worker1<-sendData()@getData(token)@calc(new Worker[]{worker1, worker2, worker3})@displayResult(token)@standardOutput<-println(token);
			//getData(stardata)@calc()@displayResult(token)@standardOutput<-println(token)@
			//getData(stardata)@calc()@displayResult(token)@standardOutput<-println(token);

	}

	String showResultlet(Resultlet r) {
		String ret = r.x+" "+r.y+" "+r.z+"\n";
		ret += "min="+r.min+"\n";
		for (int i = 0; i < r.minstar.length; i++) {
			for (int j = 0; j < 3; j++) ret += " "+r.minstar[i][j];
			ret += "\n";
		}
		ret += "max="+r.max+"\n";
		for (int i = 0; i < r.maxstar.length; i++) {
			for (int j = 0; j < 3; j++) ret += " "+r.maxstar[i][j];
			ret += "\n";
		}
		ret += "total="+r.avg+"\n";
		return ret;
	}

	/** display the content of a Result object */
	void displayResult(Result r) {
		token t1 = outputVector(r.cn);
		token t2 = outputVector(r.fn);
		token t3 = outputVector(r.ihs);
		token t4 = outputVector(r.ijs);
		token t5 = outputVector(r.ics);
		standardOutput<-println("\nmin distance: "+r.cndis)
		@standardOutput<-println(t1)
		@standardOutput<-println("max distance: "+r.fndis)
		@standardOutput<-println(t2)
		@standardOutput<-println("minmax distance: "+r.minmaxdis)
		@standardOutput<-println(t3)
		@standardOutput<-println("maxmin distance: "+r.maxmindis)
		@standardOutput<-println(t4)
		@standardOutput<-println("minavg distance: "+r.minavgdis)
		@standardOutput<-println(t5);
	}

	void displayResults(Object[] rs) {
		token t = displayResult((Result)rs[0]);
		for (int i = 1; i < rs.length; i++) t = displayResult((Result)rs[i]):waitfor(t);
	}

	String outputVector(Vector[] list) {
		join {
			for (int i = 0; i < list[0].size(); i++) outputColumn(list, i);
		}@concat(token)@currentContinuation;
	}

	String concat(Object[] strings) {
		String ret = "";
		for (int i = 0; i < strings.length; i++) ret += (String)strings[i]+"\n";
		return ret;
	}

	String outputColumn(Vector[] list, int col) {
		String ret = "<";
		for (int i = 0; i < list.length; i++) {
			ret += list[i].get(col);
			if (i == list.length-1) ret += ">";
			else if (i%3 == 2) ret += "> <";
			else ret += ",";
		}
		return ret;
	}

}

